// Code generated by MockGen. DO NOT EDIT.
// Source: accountmanagement_v1_identification_oauth.go

// Package api is a generated GoMock package.
package api

import (
	context "context"
	reflect "reflect"

	accountmanagement "github.com/authgear/authgear-server/pkg/lib/accountmanagement"
	gomock "github.com/golang/mock/gomock"
)

// MockAccountManagementV1IdentificationOAuthHandlerService is a mock of AccountManagementV1IdentificationOAuthHandlerService interface.
type MockAccountManagementV1IdentificationOAuthHandlerService struct {
	ctrl     *gomock.Controller
	recorder *MockAccountManagementV1IdentificationOAuthHandlerServiceMockRecorder
}

// MockAccountManagementV1IdentificationOAuthHandlerServiceMockRecorder is the mock recorder for MockAccountManagementV1IdentificationOAuthHandlerService.
type MockAccountManagementV1IdentificationOAuthHandlerServiceMockRecorder struct {
	mock *MockAccountManagementV1IdentificationOAuthHandlerService
}

// NewMockAccountManagementV1IdentificationOAuthHandlerService creates a new mock instance.
func NewMockAccountManagementV1IdentificationOAuthHandlerService(ctrl *gomock.Controller) *MockAccountManagementV1IdentificationOAuthHandlerService {
	mock := &MockAccountManagementV1IdentificationOAuthHandlerService{ctrl: ctrl}
	mock.recorder = &MockAccountManagementV1IdentificationOAuthHandlerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountManagementV1IdentificationOAuthHandlerService) EXPECT() *MockAccountManagementV1IdentificationOAuthHandlerServiceMockRecorder {
	return m.recorder
}

// FinishAdding mocks base method.
func (m *MockAccountManagementV1IdentificationOAuthHandlerService) FinishAdding(ctx context.Context, input *accountmanagement.FinishAddingInput) (*accountmanagement.FinishAddingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinishAdding", ctx, input)
	ret0, _ := ret[0].(*accountmanagement.FinishAddingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FinishAdding indicates an expected call of FinishAdding.
func (mr *MockAccountManagementV1IdentificationOAuthHandlerServiceMockRecorder) FinishAdding(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishAdding", reflect.TypeOf((*MockAccountManagementV1IdentificationOAuthHandlerService)(nil).FinishAdding), ctx, input)
}
